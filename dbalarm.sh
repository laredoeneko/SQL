###################################################
# Checking DB & LISTENERS ALERTLOG	#   #     #
# Author:	Mahmmoud ADEL	      # # # #   ###
# Created:	22-12-13	    #   #   # #   #  
# Modified:	23-12-13
#		Handled non exist logs (first run)
#
###################################################
SCRIPT_NAME="dbalarm.sh"
SRV_NAME=`uname -n`
MAIL_LIST="youremail@yourcompany.com"

###########################
# Getting ORACLE_SID
###########################
# Exit with sending Alert mail if No DBs are running:
INS_COUNT=$( ps -ef|grep pmon|grep -v grep|grep -v ASM|wc -l )
	if [ $INS_COUNT -eq 0 ]
	 then
	 echo "Reported By Script: ${SCRIPT_NAME}:" > /tmp/oracle_processes.log
	 echo " " >> /tmp/oracle_processes.log
	 echo "The following are the processes running by oracle user on server ${SRV_NAME}:" >> /tmp/oracle_processes.log
	 echo " " >> /tmp/oracle_processes.log
	 ps -ef|grep ora >> /tmp/oracle_processes.log
mail -s "ALARM: No Databases Are Running on Server: $SRV_NAME !!!" $MAIL_LIST < /tmp/oracle_processes.log
 	 exit
	fi

# Setting ORACLE_SID:
####################

for ORACLE_SID in $( ps -ef|grep pmon|grep -v grep|grep -v ASM|awk '{print $NF}'|sed -e 's/ora_pmon_//g'|grep -v sed|grep -v "s///g" )
   do
    export ORACLE_SID

###########################
# Getting ORACLE_HOME
###########################
  ORA_USER=`ps -ef|grep ${ORACLE_SID}|grep pmon|grep -v grep|grep -v ASM|awk '{print $1}'|tail -1`
  USR_ORA_HOME=`grep ${ORA_USER} /etc/passwd| cut -f6 -d ':'|tail -1`

## If OS is Linux:
if [ -f /etc/oratab ]
  then
  ORATAB=/etc/oratab
  ORACLE_HOME=`grep -v '^\#' $ORATAB | grep -v '^$'| grep -i "^${ORACLE_SID}:" | perl -lpe'$_ = reverse' | cut -f3 | perl -lpe'$_ = reverse' |cut -f2 -d':'`
  export ORACLE_HOME

## If OS is Solaris:
elif [ -f /var/opt/oracle/oratab ]
  then
  ORATAB=/var/opt/oracle/oratab
  ORACLE_HOME=`grep -v '^\#' $ORATAB | grep -v '^$'| grep -i "^${ORACLE_SID}:" | perl -lpe'$_ = reverse' | cut -f3 | perl -lpe'$_ = reverse' |cut -f2 -d':'`
  export ORACLE_HOME
fi

## If oratab is not exist, or ORACLE_SID not added to oratab, find ORACLE_HOME in user's profile:
if [ -z "${ORACLE_HOME}" ]
 then
  ORACLE_HOME=`grep 'ORACLE_HOME=\/' $USR_ORA_HOME/.*profile | perl -lpe'$_ = reverse' |cut -f1 -d'=' | perl -lpe'$_ = reverse'|tail -1`
  export ORACLE_HOME
fi

###########################
# Getting DB_NAME:
###########################
VAL1=$(${ORACLE_HOME}/bin/sqlplus -S "/ as sysdba" <<EOF
set pages 0 feedback off;
prompt
SELECT name from v\$database
exit;
EOF
)
# Getting DB_NAME in Uppercase & Lowercase:
DB_NAME_UPPER=`echo $VAL1| perl -lpe'$_ = reverse' |awk '{print $1}'|perl -lpe'$_ = reverse'`
DB_NAME_LOWER=$( echo "$DB_NAME_UPPER" | tr -s  '[:upper:]' '[:lower:]' )
export DB_NAME_UPPER
export DB_NAME_LOWER

# DB_NAME is Uppercase or Lowercase?:

     if [ -f $ORACLE_HOME/diagnostics/${DB_NAME_UPPER} ]
        then
                DB_NAME=$DB_NAME_UPPER
        else
                DB_NAME=$DB_NAME_LOWER
     fi

###########################
# Getting ALERTLOG path:
###########################
VAL2=$(${ORACLE_HOME}/bin/sqlplus -S "/ as sysdba" <<EOF
set pages 0 feedback off;
prompt
SELECT value from v\$parameter where NAME='background_dump_dest';
exit;
EOF
)
ALERTZ=`echo $VAL2 | perl -lpe'$_ = reverse' |awk '{print $1}'|perl -lpe'$_ = reverse'`
ALERTDB=${ALERTZ}/alert_${ORACLE_SID}.log

###########################
# Variables:
###########################
export PATH=$PATH:${ORACLE_HOME}/bin
export LOG_DIR=$USR_ORA_HOME/Logs

##########################
# Getting ORACLE_BASE:
##########################

# Get ORACLE_BASE from user's profile if it EMPTY:

if [ -z "${ORACLE_BASE}" ]
 then
   ORACLE_BASE=`grep 'ORACLE_BASE=\/' $USR_ORA_HOME/.*profile | perl -lpe'$_ = reverse' |cut -f1 -d'=' | perl -lpe'$_ = reverse'|tail -1`
fi

#############################
# Checking Database Errors:
#############################

# Determine the ALERTLOG path:
	if [ -f ${ALERTDB} ]
	 then
	  ALERTLOG=${ALERTDB}
	elif [ -f $ORACLE_BASE/admin/${ORACLE_SID}/bdump/alert_${ORACLE_SID}.log ]
	 then
	  ALERTLOG=$ORACLE_BASE/admin/${ORACLE_SID}/bdump/alert_${ORACLE_SID}.log
	else
	  ALERTLOG=$ORACLE_HOME/diagnostics/${DB_NAME}/diag/rdbms/${DB_NAME}/${ORACLE_SID}/trace/alert_${ORACLE_SID}.log
	fi

# Rename the old log generated by the script (if exists):
 if [ -f ${LOG_DIR}/alert_${ORACLE_SID}_new.log ]
  then
   mv ${LOG_DIR}/alert_${ORACLE_SID}_new.log ${LOG_DIR}/alert_${ORACLE_SID}_old.log
   # Create new log:
   tail -1000 ${ALERTLOG} > ${LOG_DIR}/alert_${ORACLE_SID}_new.log
   # Extract new entries by comparing old & new logs:
   echo "Reported By Script: ${SCRIPT_NAME}" > ${LOG_DIR}/diff_${ORACLE_SID}.log
   echo " "  >> ${LOG_DIR}/diff_${ORACLE_SID}.log
   diff ${LOG_DIR}/alert_${ORACLE_SID}_old.log ${LOG_DIR}/alert_${ORACLE_SID}_new.log |grep ">" | cut -f2 -d'>' >> ${LOG_DIR}/diff_${ORACLE_SID}.log

   # Search for errors:
   ERRORS=`cat ${LOG_DIR}/diff_${ORACLE_SID}.log | grep 'ORA-\|TNS-' | grep -v 'ORA-2396' | tail -1`
   FILE_ATTACH=${LOG_DIR}/diff_${ORACLE_SID}.log

 else
   # Create new log:
   echo "Reported By Script: ${SCRIPT_NAME}" > ${LOG_DIR}/alert_${ORACLE_SID}_new.log
   echo " "  >> ${LOG_DIR}/alert_${ORACLE_SID}_new.log
   tail -1000 ${ALERTLOG} >> ${LOG_DIR}/alert_${ORACLE_SID}_new.log

   # Search for errors:
   ERRORS=`cat ${LOG_DIR}/alert_${ORACLE_SID}_new.log | grep 'ORA-\|TNS-' | grep -v "ORA-2396" | tail -1`
   FILE_ATTACH=${LOG_DIR}/alert_${ORACLE_SID}_new.log
 fi

 # Send mail in case error exist:
 	case "$ERRORS" in
 	*ORA-*|*TNS-*)
mail -s "ALERT: Instance (${ORACLE_SID}) on Server (${SRV_NAME}) reporting errors: ${ERRORS}" ${MAIL_LIST} < ${FILE_ATTACH}
 	esac

#######################
# Reporting Offline DBs:
#######################
# Populate /tmp/alldb.log from ORATAB: [EXCLUDING PEFMS}
  grep -v '^\#' $ORATAB | grep -v "ASM" | grep -v "pefms:" | grep -v '^$' | grep "^" | cut -f1 -d':' > /tmp/alldb.log
# Populate /tmp/updb.log:
  echo $ORACLE_SID >> /tmp/updb.log
  echo $DB_NAME >> /tmp/updb.log

# End looping for databases:
done

# Continue Reporting Offline DBs...
# Sort the lines alphabetically with removing duplicates:
sort /tmp/updb.log  | uniq -d > /tmp/updb.log.sort
sort /tmp/alldb.log > /tmp/alldb.log.sort
diff /tmp/alldb.log.sort /tmp/updb.log.sort > /tmp/diff.sort
echo "The Following Instances are Down on $SRV_NAME :" > /tmp/offdb.log
grep "^< " /tmp/diff.sort | cut -f2 -d'<' >> /tmp/offdb.log
echo " " >> /tmp/offdb.log
echo "If those instances are permanently offline, please hash their entries in $ORATAB to let the script ignore them in the next run." >> /tmp/offdb.log
OFFLINE_DBS_NUM=`cat /tmp/offdb.log| wc -l`

# If OFFLINE_DBS is not null:
	if [ ${OFFLINE_DBS_NUM} -gt 3 ]
	 then
mail -s "ALARM: Database Down on Server: ($SRV_NAME)" $MAIL_LIST < /tmp/offdb.log
	fi

# Wiping Logs:
cat /dev/null >  /tmp/updb.log
cat /dev/null >  /tmp/alldb.log
cat /dev/null >  /tmp/updb.log.sort
cat /dev/null >  /tmp/alldb.log.sort
cat /dev/null >  /tmp/diff.sort

#############################
# Checking Listeners log:
#############################

# In case there is NO Listeners are running send an (Alarm):
LSN_COUNT=$( ps -ef|grep -v grep|grep tnslsnr|wc -l )

 if [ $LSN_COUNT -eq 0 ]
  then
   echo "The following are the processes running by ${ORA_USER} user on server ${SRV_NAME}:" > ${LOG_DIR}/listener_processes.log
   echo " " >> ${LOG_DIR}/listener_processes.log
   ps -ef|grep -v grep|grep oracle >> ${LOG_DIR}/listener_processes.log
mail -s "ALARM: No Listeners Are Running on Server: $SRV_NAME !!!" $MAIL_LIST < ${LOG_DIR}/listener_processes.log
  
  # In case there is a listener running analyze it's log:
  else
	for LISTENER_NAME in $( ps -ef|grep -v grep|grep tnslsnr|awk '{print $(NF-1)}' )
	 do
	  LISTENER_HOME=`ps -ef|grep -v grep|grep tnslsnr|grep ${LISTENER_NAME}|awk '{print $(NF-2)}' |sed -e 's/\/bin\/tnslsnr//g'|grep -v sed|grep -v "s///g"`
	  TNS_ADMIN=${LISTENER_HOME}/network/admin; export TNS_ADMIN
	  LISTENER_LOGDIR=`${LISTENER_HOME}/bin/lsnrctl status ${LISTENER_NAME} |grep "Listener Log File"| awk '{print $NF}'| sed -e 's/\/alert\/log.xml//g'`
	  LISTENER_LOG=${LISTENER_LOGDIR}/trace/${LISTENER_NAME}.log

	  # Determine if the listener name is in Upper/Lower case:
	        if [ -f  ${LISTENER_LOG} ]
	         then
		  # Listner_name is Uppercase:
	          LISTENER_NAME=$( echo ${LISTENER_NAME} | perl -lpe'$_ = reverse' |perl -lpe'$_ = reverse' )
	          LISTENER_LOG=${LISTENER_LOGDIR}/trace/${LISTENER_NAME}.log
	        else
		  # Listener_name is Lowercase:
	          LISTENER_NAME=$( echo "${LISTENER_NAME}" | tr -s  '[:upper:]' '[:lower:]' )
	          LISTENER_LOG=${LISTENER_LOGDIR}/trace/${LISTENER_NAME}.log
	        fi
	
	  # Rename the old log (If exists):
	  if [ -f ${LOG_DIR}/alert_${LISTENER_NAME}_new.log ]
	   then
	      mv ${LOG_DIR}/alert_${LISTENER_NAME}_new.log ${LOG_DIR}/alert_${LISTENER_NAME}_old.log
	    # Create a new log:
	      tail -1000 ${LISTENER_LOG} > ${LOG_DIR}/alert_${LISTENER_NAME}_new.log
	    # Get the new entries:
	      echo "Reported By Script: ${SCRIPT_NAME}" > ${LOG_DIR}/diff_${LISTENER_NAME}.log
	      echo " " >> ${LOG_DIR}/diff_${LISTENER_NAME}.log
	      diff ${LOG_DIR}/alert_${LISTENER_NAME}_old.log  ${LOG_DIR}/alert_${LISTENER_NAME}_new.log | grep ">" | cut -f2 -d'>' >> ${LOG_DIR}/diff_${LISTENER_NAME}.log
	    # Search for errors:
	     ERRORS=`cat ${LOG_DIR}/diff_${LISTENER_NAME}.log| grep "TNS-" |tail -1`
	     SRVC_REG=`cat ${LOG_DIR}/diff_${LISTENER_NAME}.log| grep "service_register" `
	     FILE_ATTACH=${LOG_DIR}/diff_${LISTENER_NAME}.log

	 # If no old logs exist:
	 else
	    # Just create a new log without doing any comparison:
             echo "Reported By Script: ${SCRIPT_NAME}" > ${LOG_DIR}/alert_${LISTENER_NAME}_new.log
	     echo " " >> ${LOG_DIR}/alert_${LISTENER_NAME}_new.log
             tail -1000 ${LISTENER_LOG} >> ${LOG_DIR}/alert_${LISTENER_NAME}_new.log

            # Search for errors:
              ERRORS=`cat ${LOG_DIR}/alert_${LISTENER_NAME}_new.log | grep "TNS-" | tail -1`
              SRVC_REG=`cat ${LOG_DIR}/alert_${LISTENER_NAME}_new.log | grep "service_register" `
              FILE_ATTACH=${LOG_DIR}/alert_${LISTENER_NAME}_new.log
	 fi

          # Report TNS Errors (Alert)
            case "$ERRORS" in
            *TNS-*)
mail -s "ALERT: Listener (${LISTENER_NAME}) on Server (${SRV_NAME}) reporting errors: ${ERRORS}" $MAIL_LIST < ${FILE_ATTACH}
            esac

          # Report Registered Services to the listener (Info)
            case "$SRVC_REG" in
            *service_register*)
mail -s "INFO: Service Registered on Listener (${LISTENER_NAME}) on Server (${SRV_NAME}) | TNS poisoning posibility" $MAIL_LIST < ${FILE_ATTACH}
            esac

	done
 fi

###############
# END OF SCRIPT
###############
# REPORT BUGS to: <mahmmoudadel@hotmail.com>.
# DISCLAIMER: THIS SCRIPT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, BUT WITHOUT ANY WARRANTY. IT IS PROVIDED "AS IS".
# Please visit my blog: http://dba-tips.blogspot.com
